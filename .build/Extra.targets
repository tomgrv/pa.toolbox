<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>

    <MSBuildCommunityTasksPath Condition=" '$(MSBuildCommunityTasksPath)' == '' ">$(SolutionDir)\packages\MSBuildTasks.1.4.0.78\tools</MSBuildCommunityTasksPath>
    <DependentTargetsPath>$(SolutionDir).build\</DependentTargetsPath>
    <DependentTargetsMask>_*.targets</DependentTargetsMask>
    
    <BuildDependsOn>
      BuildExtra;
      $(BuildDependsOn)
    </BuildDependsOn>
    <CleanDependsOn>
      $(CleanDependsOn);
      BuildExtraClean
    </CleanDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <TargetsFound Include="$(DependentTargetsPath)_*.targets" />
  </ItemGroup>

  <Import Condition="Exists($(MSBuildCommunityTasksPath))" Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets" />

  <!-- Workaround for missing task declaration in MSbuildTasks project (pull request already sent) -->
  <UsingTask Condition="Exists($(MSBuildCommunityTasksLib))" AssemblyFile="$(MSBuildCommunityTasksLib)" TaskName="MSBuild.Community.Tasks.Git.GitBranch" />

  <Target Name="BuildExtra"  DependsOnTargets="InitExtra;ProcessTarget" >
    <PropertyGroup>
      
    </PropertyGroup>
    <Message Text="Extra build completed!"/>
  </Target>

  <Target Name="ProcessTarget" Outputs="%(TargetsFound.Identity)">
    <PropertyGroup>
      <TargetFileName>%(TargetsFound.Filename)</TargetFileName>
      <TargetName>$(TargetFileName.Substring(1))</TargetName>
    </PropertyGroup>
    <CallTarget  Targets="$(TargetName)" />
  </Target>

  <Target Name="InitExtra">

    <GitDescribe LocalPath="$(SolutionDir)">
      <Output TaskParameter="Tag" PropertyName="GitTag" />
      <Output TaskParameter="CommitHash" PropertyName="GitHash" />
    </GitDescribe>

    <PropertyGroup>
      <Version-Last Condition=" $(GitTag.IndexOf('-')) &gt; '0' ">$(GitTag.SubString(0, $(GitTag.IndexOf('-'))))</Version-Last>
      <Version-Last Condition=" $(GitTag.IndexOf('-')) &lt; '0' ">$(GitTag)</Version-Last>
      <Version-Major Condition=" $(Version-Last.Length) &gt; '0' ">$(Version-Last.Split('.')[0])</Version-Major>
      <Version-Minor Condition=" $(Version-Last.Length) &gt; '0' ">$(Version-Last.Split('.')[1])</Version-Minor>
    </PropertyGroup>

    <Computer>
      <Output TaskParameter="Name" PropertyName="BuildMachineName" />
      <Output TaskParameter="OSPlatform" PropertyName="BuildMachineOSPlatform" />
      <Output TaskParameter="OSVersion" PropertyName="BuildMachineOSVersion" />
    </Computer>

    <GitBranch LocalPath="$(SolutionDir)">
      <Output TaskParameter="Branch" PropertyName="GitBranch" />
    </GitBranch>

    <PropertyGroup Condition=" '$(GitBranch.SubString(0,8))' == 'release/'  ">
     
      <Version-Current>$(GitBranch.SubString(8))</Version-Current>
      <Version-Major Condition=" $(Version-Current.Length) &gt; '0' ">$(Version-Current.Split('.')[0])</Version-Major>
      <Version-Minor Condition=" $(Version-Current.Length) &gt; '0' ">$(Version-Current.Split('.')[1])</Version-Minor>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(GitBranch.SubString(0,7))' == 'hotfix/' ">

      <Version-Current>$(GitBranch.SubString(7))</Version-Current>
      <Version-Major Condition=" $(Version-Current.Length) &gt; '0' ">$(Version-Current.Split('.')[0])</Version-Major>
      <Version-Minor Condition=" $(Version-Current.Length) &gt; '0' ">$(Version-Current.Split('.')[1])</Version-Minor>
    </PropertyGroup>



   
    <Version BuildType="Automatic" RevisionType="Automatic" Major="$(Version-Major)" Minor="$(Version-Minor)">
      <Output TaskParameter="Build" PropertyName="Version-Build" />
      <Output TaskParameter="Revision" PropertyName="Version-Revision" />
    </Version>

    <PropertyGroup>
      <Version-Suffix>b$(Version-Revision)</Version-Suffix>
      <Version-Main>$(Version-Major).$(Version-Minor).0.0</Version-Main>
      <Version-File>$(Version-Major).$(Version-Minor).$(Version-Build).$(Version-Revision)</Version-File>
    </PropertyGroup>

    <Message Text="Determine assembly version: $(Version-File)-$(Version-Suffix) for tag $(GitTag)" />

  </Target>

  <Target Name="BuildExtraClean">
  </Target>

  <Import Project="$(DependentTargetsPath)$(DependentTargetsMask)" />
</Project>